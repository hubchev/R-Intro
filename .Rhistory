# make sure you have pagedown >= 0.2 and xaringan >= 0.9; if not, run
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
# make sure you have pagedown >= 0.2 and xaringan >= 0.9; if not, run
library(remotes)
# make sure you have pagedown >= 0.2 and xaringan >= 0.9; if not, run
install.packages(remotes)
# make sure you have pagedown >= 0.2 and xaringan >= 0.9; if not, run
install.packages("remotes")
install.packages("pagedown")
install.packages("xaringan")
library(pagedown)
library(remotes)
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
library(pagedown)
pagedown::chrome_print("/home/sthu/Dropbox/hsf/courses_202/R/github/R-Intro/lessons/SH-01.Rmd")
?pagedown
??pagedown
install.packages("webshot")
library(webshot)
install_phantomjs()
setwd("~/Dropbox/hsf/courses_202/R/github/R-Intro")
file_name <- paste0("file://", normalizePath("lessons/SH-02.html"))
webshot(file_name, "mypdf.pdf")
file_name <- paste0("file://", normalizePath("/lessons/SH-02.html"))
webshot(file_name, "mypdf.pdf")
file_name <- paste0("file://", normalizePath("lessons/SH-02.html"))
file_name <- paste0("file:/", normalizePath("lessons/SH-02.html"))
webshot(file_name, "mypdf.pdf")
file_name <- paste0("file:", normalizePath("lessons/SH-02.html"))
webshot(file_name, "mypdf.pdf")
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
library(httpuv)
library(remotes)
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
install.packages("websocket")
library(httpuv)
library(remotes)
remotes::install_github(c('rstudio/pagedown', 'yihui/xaringan'))
library(websocket)
# with "Ctrl+Enter" you can execute a line of command, try it out:
print("Hello, world!")
# we use the book: "R for Dummies" in the course
# when reading the book, always try to execute the code snippets by your own
# For example, p. 3:
# Simulate 1 million throws of two six‐sided dices:
set.seed(42)
throws <- 1e6
dice <- replicate(2,
sample(1:6, throws, replace = TRUE)
)
source('~/Dropbox/hsf/courses_202/R/github/R-Intro/scripts/SH-R-01.R')
pagebreak
```r
sqrt(81)
```
```r
sqrt(glengths)
```
sqrt(b)
?round
round(3.12342)
round(3.12342, digits)
round(3.12342, digits = 2)
```r
args(round)
```
args(round)
```r
example("round")
```
mean(b)
?mean
x -> c(x, 10)
x -> c(x 10)
x <- c(x, 10)
mean(x)
mean(x, trim=1)
mean(x, trim=.5)
mean(x, trim=2)
example(mean)
```r
sessionInfo() #Print version information about R, the OS and attached or loaded packages
search() #Gives a list of attached packages
```
search()
R packages are collections of functions and data sets developed by the community. They increase the power of R by improving existing base R functionalities, or by adding new ones. For example, if you are usually working with data frames, probably you will have heard about dplyr or data.table, two of the most popular R packages. The official repository (CRAN) contains more than 10,000 packages, and many more are publicly available through the internet.
There are 10,000+ user contributed packages and the number is growing.
```r
sessionInfo() #Print version information about R, the OS and attached or loaded packages
```
install.packages("devtools")
devtools::install_github("hadley/babynames")
library(devtools)
install.packages("r-base-dev")
install.packages("r-base-dev")
install.packages("r-devel")
install.packages("devtools")
install.packages("xml2")
install.packages("devtools")
```r
library(ggplot2)
```
insertClassMethods()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
library(ggplot2)
install.packages("tidyverse")
?tidyverse
help(tidyverse)
help("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
economics
packageDescription("tidyverse")
knit_with_parameters('~/Dropbox/hsf/courses_202/R/github/R-Intro/lessons/SH-03.Rmd')
```r
square_it(5)
```
```r
square_it <- function(x) {
square <- x * x
return(square)
}
```
Now, we can use the function as we would any other function. We type out the name of the function, and inside the parentheses  we provide a numeric value `x`:
knitr::opts_chunk$set(echo = TRUE)
```{r echo=TRUE}
square_it(5)
knit_with_parameters('~/Dropbox/hsf/courses_202/R/github/R-Intro/lessons/SH-03.Rmd')
square_it(5)
knitr::opts_chunk$set(echo = FALSE)
show(model)
## baseline regression  model
model  <- lm(weight ~ height + sex , data = classdata )
show(model)
library("haven")
classdata <- read.csv("/home/sthu/Dropbox/hsf/courses_202/destat/classdata/classdata.csv")
head(classdata)
## baseline regression  model
model  <- lm(weight ~ height + sex , data = classdata )
show(model)
summary(model)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, caret, lars, tidyverse)
head(USJudgeRatings)
data <- USJudgeRatings
# Define variable groups
x <- as.matrix(data[, -12])
y <- data[, 12]
# Using variable groups
reg1 <- lm(y ~ x)
# Or specify variables individually
reg1 <- lm(RTEN ~ CONT + INTG + DMNR + DILG + CFMG +
DECI + PREP + FAMI + ORAL + WRIT + PHYS,
data = USJudgeRatings)
# Results
reg1           # Coefficients only
summary(reg1)  # Inferential tests
anova(reg1)            # Coefficients w/inferential tests
coef(reg1)             # Coefficients (same as reg1)
confint(reg1)          # CI for coefficients
resid(reg1)            # Residuals case-by-case
hist(residuals(reg1))  # Histogram of residuals
# Conventional stepwise regression
stepwise <- lars(x, y, type = "stepwise")
x = rnorm(10)
y = rnorm(10)
t.test(x,y)
t.test(x,y)
The value we want is named "statistic". To extract it, we can use the dollar sign notation, or double square brackets:
ttest$statistic
ttest = t.test(x,y)
names(ttest)
The value we want is named "statistic". To extract it, we can use the dollar sign notation, or double square brackets:
ttest$statistic
ttest[['statistic']]
Of course, just one value doesn't let us do very much - we need to generate many such statistics before we can look at their properties. In R, the replicate function makes this very simple. The first argument to replicate is the number of samples you want, and the second argument is an expression (not a function name or definition!) that will generate one of the samples you want. To generate 1000 t-statistics from testing two groups of 10 standard random normal numbers, we can use:
ts = replicate(1000,t.test(rnorm(10),rnorm(10))$statistic)
Under the assumptions of normality and equal variance, we're assuming that the statistic will have a t-distribution with 10 + 10 - 2 = 18 degrees of freedom. (Each observation contributes a degree of freedom, but we lose two because we have to estimate the mean of each group.) How can we test if that is true?
One way is to plot the theoretical density of the t-statistic we should be seeing, and superimposing the density of our sample on top of it. To get an idea of what range of x values we should use for the theoretical density, we can view the range of our simulated data:
range(ts)
Since the distribution is supposed to be symmetric, we'll use a range from -4.5 to 4.5. We can generate equally spaced x-values in this range with seq:
pts = seq(-4.5,4.5,length=100)
plot(pts,dt(pts,df=18),col='red',type='l')
Now we can add a line to the plot showing the density for our simulated sample:
lines(density(ts))
Another way to compare two densities is with a quantile-quantile plot. In this type of plot, the quantiles of two samples are calculated at a variety of points in the range of 0 to 1, and then are plotted against each other. If the two samples came from the same distribution with the same parameters, we'd see a straight line through the origin with a slope of 1; in other words, we're testing to see if various quantiles of the data are identical in the two samples. If the two samples came from similar distributions, but their parameters were different, we'd still see a straight line, but not through the origin. For this reason, it's very common to draw a straight line through the origin with a slope of 1 on plots like this. We can produce a quantile-quantile plot (or QQ plot as they are commonly known), using the qqplot function. To use qqplot, pass it two vectors that contain the samples that you want to compare. When comparing to a theoretical distribution, you can pass a random sample from that distribution. Here's a QQ plot for the simulated t-test data:
qqplot(ts,rt(1000,df=18))
pts
p
Since the distribution is supposed to be symmetric, we'll use a range from -4.5 to 4.5. We can generate equally spaced x-values in this range with seq:
pts = seq(-4.5,4.5,length=100)
plot(pts,dt(pts,df=18),col='red',type='l')
Now we can add a line to the plot showing the density for our simulated sample:
lines(density(ts))
Another way to compare two densities is with a quantile-quantile plot. In this type of plot, the quantiles of two samples are calculated at a variety of points in the range of 0 to 1, and then are plotted against each other. If the two samples came from the same distribution with the same parameters, we'd see a straight line through the origin with a slope of 1; in other words, we're testing to see if various quantiles of the data are identical in the two samples. If the two samples came from similar distributions, but their parameters were different, we'd still see a straight line, but not through the origin. For this reason, it's very common to draw a straight line through the origin with a slope of 1 on plots like this. We can produce a quantile-quantile plot (or QQ plot as they are commonly known), using the qqplot function. To use qqplot, pass it two vectors that contain the samples that you want to compare. When comparing to a theoretical distribution, you can pass a random sample from that distribution. Here's a QQ plot for the simulated t-test data:
qqplot(ts,rt(1000,df=18))
Since the distribution is supposed to be symmetric, we'll use a range from -4.5 to 4.5. We can generate equally spaced x-values in this range with seq:
pts = seq(-4.5,4.5,length=100)
plot(pts,dt(pts,df=18),col='red',type='l')
Now we can add a line to the plot showing the density for our simulated sample:
lines(density(ts))
Another way to compare two densities is with a quantile-quantile plot. In this type of plot, the quantiles of two samples are calculated at a variety of points in the range of 0 to 1, and then are plotted against each other. If the two samples came from the same distribution with the same parameters, we'd see a straight line through the origin with a slope of 1; in other words, we're testing to see if various quantiles of the data are identical in the two samples. If the two samples came from similar distributions, but their parameters were different, we'd still see a straight line, but not through the origin. For this reason, it's very common to draw a straight line through the origin with a slope of 1 on plots like this. We can produce a quantile-quantile plot (or QQ plot as they are commonly known), using the qqplot function. To use qqplot, pass it two vectors that contain the samples that you want to compare. When comparing to a theoretical distribution, you can pass a random sample from that distribution. Here's a QQ plot for the simulated t-test data:
qqplot(ts,rt(1000,df=18))
abline(0,1)
Since the distribution is supposed to be symmetric, we'll use a range from -4.5 to 4.5. We can generate equally spaced x-values in this range with seq:
pts = seq(-4.5,4.5,length=100)
plot(pts,dt(pts,df=18),col='red',type='l')
Now we can add a line to the plot showing the density for our simulated sample:
lines(density(ts))
Another way to compare two densities is with a quantile-quantile plot. In this type of plot, the quantiles of two samples are calculated at a variety of points in the range of 0 to 1, and then are plotted against each other. If the two samples came from the same distribution with the same parameters, we'd see a straight line through the origin with a slope of 1; in other words, we're testing to see if various quantiles of the data are identical in the two samples. If the two samples came from similar distributions, but their parameters were different, we'd still see a straight line, but not through the origin. For this reason, it's very common to draw a straight line through the origin with a slope of 1 on plots like this. We can produce a quantile-quantile plot (or QQ plot as they are commonly known), using the qqplot function. To use qqplot, pass it two vectors that contain the samples that you want to compare. When comparing to a theoretical distribution, you can pass a random sample from that distribution. Here's a QQ plot for the simulated t-test data:
qqplot(ts,rt(1000,df=18))
Since the distribution is supposed to be symmetric, we'll use a range from -4.5 to 4.5. We can generate equally spaced x-values in this range with seq:
pts = seq(-4.5,4.5,length=100)
plot(pts,dt(pts,df=18),col='red',type='l')
Now we can add a line to the plot showing the density for our simulated sample:
lines(density(ts))
Another way to compare two densities is with a quantile-quantile plot. In this type of plot, the quantiles of two samples are calculated at a variety of points in the range of 0 to 1, and then are plotted against each other. If the two samples came from the same distribution with the same parameters, we'd see a straight line through the origin with a slope of 1; in other words, we're testing to see if various quantiles of the data are identical in the two samples. If the two samples came from similar distributions, but their parameters were different, we'd still see a straight line, but not through the origin. For this reason, it's very common to draw a straight line through the origin with a slope of 1 on plots like this. We can produce a quantile-quantile plot (or QQ plot as they are commonly known), using the qqplot function. To use qqplot, pass it two vectors that contain the samples that you want to compare. When comparing to a theoretical distribution, you can pass a random sample from that distribution. Here's a QQ plot for the simulated t-test data:
qqplot(ts,rt(1000,df=18))
x = rnorm(10)
y = rnorm(10)
t.test(x,y)
x
y
lines(density(y))
lines(density(y))
Since the distribution is supposed to be symmetric, we'll use a range from -4.5 to 4.5. We can generate equally spaced x-values in this range with seq:
pts = seq(-4.5,4.5,length=100)
plot(pts,dt(pts,df=18),col='red',type='l')
Now we can add a line to the plot showing the density for our simulated sample:
lines(density(ts))
Another way to compare two densities is with a quantile-quantile plot. In this type of plot, the quantiles of two samples are calculated at a variety of points in the range of 0 to 1, and then are plotted against each other. If the two samples came from the same distribution with the same parameters, we'd see a straight line through the origin with a slope of 1; in other words, we're testing to see if various quantiles of the data are identical in the two samples. If the two samples came from similar distributions, but their parameters were different, we'd still see a straight line, but not through the origin. For this reason, it's very common to draw a straight line through the origin with a slope of 1 on plots like this. We can produce a quantile-quantile plot (or QQ plot as they are commonly known), using the qqplot function. To use qqplot, pass it two vectors that contain the samples that you want to compare. When comparing to a theoretical distribution, you can pass a random sample from that distribution. Here's a QQ plot for the simulated t-test data:
qqplot(ts,rt(1000,df=18))
x = rnorm(10)
y = 1+rnorm(10)
t.test(x,y)
x = rnorm(10)
y = 100+rnorm(10)
t.test(x,y)
x = rnorm(1000)
y = 1+rnorm(1000)
t.test(x,y)
x = rnorm(1000)
y = .001+rnorm(1000)
t.test(x,y)
x = rnorm(1000)
y = .01+rnorm(1000)
t.test(x,y)
x = rnorm(1000)
y = .1+rnorm(1000)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(100)
y = .1+rnorm(100)
t.test(x,y)
plot(density(y))
lines(density(x))
y = 1+rnorm(100)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(1000)
y = 1+rnorm(1000)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(100)
y = 1+rnorm(1000)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(1000)
y = 1+rnorm(1000)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(1000)
y = 1+rnorm(1000)
t.test(x,5)
t.test(x,x=5)
ttest
ttest(x,0)
# load the `CASchools` dataset
data(CASchools)
library(AER)
library(scales)
install.packages("AER")
library(AER)
library(scales)
# load the `CASchools` dataset
data(CASchools)
# add student-teacher ratio
CASchools$STR <- CASchools$students/CASchools$teachers
# add average test-score
CASchools$score <- (CASchools$read + CASchools$math)/2
# estimate the model
linear_model <- lm(score ~ STR, data = CASchools)
# print the summary of the coefficients to the console
summary(linear_model)$coefficients
# print the summary of the coefficients to the console
summary(linear_model)$coefficients
# Plot the standard normal on the support [-6,6]
t <- seq(-6, 6, 0.01)
plot(x = t,
y = dnorm(t, 0, 1),
type = "l",
col = "steelblue",
lwd = 2,
yaxs = "i",
axes = F,
ylab = "",
main = expression("Calculating the p-value of a Two-sided Test when" ~ t^act ~ "=-4.75"),
cex.lab = 0.7,
cex.main = 1)
tact <- -4.75
axis(1, at = c(0, -1.96, 1.96, -tact, tact), cex.axis = 0.7)
# critical region in left tail
polygon(x = c(-6, seq(-6, -1.96, 0.01), -1.96),
y = c(0, dnorm(seq(-6, -1.96, 0.01)), 0),
col = 'orange')
polygon(x = c(1.96, seq(1.96, 6, 0.01), 6),
y = c(0, dnorm(seq(1.96, 6, 0.01)), 0),
col = 'orange')
# Add arrows and texts indicating critical regions and the p-value
arrows(-3.5, 0.2, -2.5, 0.02, length = 0.1)
arrows(3.5, 0.2, 2.5, 0.02, length = 0.1)
arrows(-5, 0.16, -4.75, 0, length = 0.1)
arrows(5, 0.16, 4.75, 0, length = 0.1)
text(-3.5, 0.22,
labels = expression("0.025"~"="~over(alpha, 2)),
cex = 0.7)
text(3.5, 0.22,
labels = expression("0.025"~"="~over(alpha, 2)),
cex = 0.7)
text(-5, 0.18,
labels = expression(paste("-|",t[act],"|")),
cex = 0.7)
text(5, 0.18,
labels = expression(paste("|",t[act],"|")),
cex = 0.7)
# Add ticks indicating critical values at the 0.05-level, t^act and -t^act
rug(c(-1.96, 1.96), ticksize  = 0.145, lwd = 2, col = "darkred")
rug(c(-tact, tact), ticksize  = -0.0451, lwd = 2, col = "darkgreen")
x = rnorm(1000)
y = 1+rnorm(1000)
t.test(x,x=5)
plot(density(y))
lines(density(x))
x = rnorm(1000)
y = 1+rnorm(100)
t.test(x,x=5)
plot(density(y))
lines(density(x))
x = rnorm(1000)
y = rnorm(1000)
t.test(x,x=5)
plot(density(y))
lines(density(x))
x = rnorm(1000)
y = rnorm(1000)
t.test(x,x=5)
plot(density(y))
lines(density(x))
x = rnorm(1000)
y = rnorm(1000)
t.test(x,x=5)
plot(density(y))
lines(density(x))
x = rnorm(100000)
y = rnorm(100000)
t.test(x,x=5)
plot(density(y))
lines(density(x))
x = rnorm(100)
y = rnorm(100)
x
y
plot(density(y))
lines(density(x))
t.test(x,y)
x = rnorm(10000)
y = rnorm(10000)
t.test(x,y)
x = rnorm(10000)
y = rnorm(10000)
t.test(x,y)
x = rnorm(10000)
y = rnorm(10000)
t.test(x,y)
x = rnorm(10000)
y = rnorm(10000)
t.test(x,y)
x = rnorm(10000)
y = 3+rnorm(10000)
t.test(x,y)
y
x
plot(density(y))
lines(density(x))
t.test(x,y)
x = rnorm(10)
y = 3+rnorm(10)
t.test(x,y)
plot(density(y))
lines(density(x))
t.test(x,y)
x = rnorm(100)
y = 0.1+rnorm(100)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(100)
y = 0.1+rnorm(100)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(1000000)
y = 0.1+rnorm(1000000)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(100)
y = 500+rnorm(100)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(10)
y = 5+rnorm(10)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(10)
y = 1+rnorm(10)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(1000)
y = 1+rnorm(1000)
t.test(x,y)
plot(density(y))
lines(density(x))
x = rnorm(100000)
y = 1+rnorm(100000)
t.test(x,y)
plot(density(y))
lines(density(x))
library(AER)
library(scales)
# load the `CASchools` dataset
data(CASchools)
# add student-teacher ratio
CASchools$STR <- CASchools$students/CASchools$teachers
# add average test-score
CASchools$score <- (CASchools$read + CASchools$math)/2
# estimate the model
linear_model <- lm(score ~ STR, data = CASchools)
# print the summary of the coefficients to the console
summary(linear_model)$coefficients
# print the summary of the coefficients to the console
summary(linear_model)$coefficients
# Plot the standard normal on the support [-6,6]
t <- seq(-6, 6, 0.01)
plot(x = t,
y = dnorm(t, 0, 1),
type = "l",
col = "steelblue",
lwd = 2,
yaxs = "i",
axes = F,
ylab = "",
main = expression("Calculating the p-value of a Two-sided Test when" ~ t^act ~ "=-4.75"),
cex.lab = 0.7,
cex.main = 1)
tact <- -4.75
axis(1, at = c(0, -1.96, 1.96, -tact, tact), cex.axis = 0.7)
# critical region in left tail
polygon(x = c(-6, seq(-6, -1.96, 0.01), -1.96),
y = c(0, dnorm(seq(-6, -1.96, 0.01)), 0),
col = 'orange')
polygon(x = c(1.96, seq(1.96, 6, 0.01), 6),
y = c(0, dnorm(seq(1.96, 6, 0.01)), 0),
col = 'orange')
# Add arrows and texts indicating critical regions and the p-value
arrows(-3.5, 0.2, -2.5, 0.02, length = 0.1)
arrows(3.5, 0.2, 2.5, 0.02, length = 0.1)
arrows(-5, 0.16, -4.75, 0, length = 0.1)
arrows(5, 0.16, 4.75, 0, length = 0.1)
text(-3.5, 0.22,
labels = expression("0.025"~"="~over(alpha, 2)),
cex = 0.7)
text(3.5, 0.22,
labels = expression("0.025"~"="~over(alpha, 2)),
cex = 0.7)
text(-5, 0.18,
labels = expression(paste("-|",t[act],"|")),
cex = 0.7)
text(5, 0.18,
labels = expression(paste("|",t[act],"|")),
cex = 0.7)
# Add ticks indicating critical values at the 0.05-level, t^act and -t^act
rug(c(-1.96, 1.96), ticksize  = 0.145, lwd = 2, col = "darkred")
rug(c(-tact, tact), ticksize  = -0.0451, lwd = 2, col = "darkgreen")
ttest = t.test(x,y)
names(ttest)
